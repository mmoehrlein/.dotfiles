# Basic Settings
#set preview false
#set previewer ~/scripts/lf/preview
set previewer pistol
set hidden true
set color256 true
set drawbox true
set icons true
set ignorecase true

# Custom Functions
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$fx";;
        video/*|application/pdf) xdg-open "$f" & disown;;
        *) for f in "$fx"; do xdg-open "$f"> /dev/null 2> /dev/null & done;;
    esac
}}

cmd mkdir ${{
    printf "Directory Name: "
    read ans
    mkdir $ans
}}

cmd mkfile ${{
    printf "File Name: "
    read ans
    $EDITOR $ans
}}

cmd sudomkfile ${{
    printf "File Name: "
    read ans
    sudo $EDITOR $ans
}}

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd broot_jump ${{
  f=$(mktemp)
  res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
  rm -f "$f"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}
cmd dragon %dragon-drag-and-drop -a -x $fx
cmd cpdragon %cpdragon
cmd mvdragon %mvdragon
cmd dlfile %dlfile

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

cmd openterm ${{
    $TERMINAL &
}}

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd stripspace %stripspace "$f"

# Bindings
# Remove some defaults
map m
map n
map "'"
map '"'
map d
map c
map e

# File Openers
map ee $$EDITOR "$f"
map es $sudo $EDITOR "$f"
map oe $$CODEEDITOR "$f"
map os $sudo $CODEEDITOR "$f"
map z $$READER "$f"
map a $$PAGER "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Basic Functions
map . set hidden!
map dd trash
map DD delete
map tc clear_trash
map tr restore_trash

map p paste
map x cut
map y copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map ot openterm
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect

# Movement
map gd cd ~/documents
map gD cd ~/downloads

map gs cd ~/bin

map gr cd ~/repos

map gc cd ~/.config
map gC cd ~/cell
map gE cd /etc
map gU. cd /usr
map gUs cd /usr/share

# Open Configs
map cba $$EDITOR ~/.bashrc

map cn $$EDITOR ~/.config/nvim/init.vim
map ca $$EDITOR ~/.config/mimeapps.list
